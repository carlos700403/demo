// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kidlj/demo/ent/mixins/ent/pet"
	"github.com/kidlj/demo/ent/mixins/ent/predicate"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	age        *int
	addage     *int
	name       *string
	weight     *float64
	addweight  *float64
	predicates []predicate.Pet
}

// Where adds a new predicate for the builder.
func (pu *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetAge sets the age field.
func (pu *PetUpdate) SetAge(i int) *PetUpdate {
	pu.age = &i
	pu.addage = nil
	return pu
}

// AddAge adds i to age.
func (pu *PetUpdate) AddAge(i int) *PetUpdate {
	if pu.addage == nil {
		pu.addage = &i
	} else {
		*pu.addage += i
	}
	return pu
}

// SetName sets the name field.
func (pu *PetUpdate) SetName(s string) *PetUpdate {
	pu.name = &s
	return pu
}

// SetWeight sets the weight field.
func (pu *PetUpdate) SetWeight(f float64) *PetUpdate {
	pu.weight = &f
	pu.addweight = nil
	return pu
}

// AddWeight adds f to weight.
func (pu *PetUpdate) AddWeight(f float64) *PetUpdate {
	if pu.addweight == nil {
		pu.addweight = &f
	} else {
		*pu.addweight += f
	}
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PetUpdate) Save(ctx context.Context) (int, error) {
	if pu.age != nil {
		if err := pet.AgeValidator(*pu.age); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
		}
	}
	if pu.name != nil {
		if err := pet.NameValidator(*pu.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(pu.driver.Dialect())
		selector = builder.Select(pet.FieldID).From(builder.Table(pet.Table))
	)
	for _, p := range pu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = pu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := pu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(pet.Table)
	)
	updater = updater.Where(sql.InInts(pet.FieldID, ids...))
	if value := pu.age; value != nil {
		updater.Set(pet.FieldAge, *value)
	}
	if value := pu.addage; value != nil {
		updater.Add(pet.FieldAge, *value)
	}
	if value := pu.name; value != nil {
		updater.Set(pet.FieldName, *value)
	}
	if value := pu.weight; value != nil {
		updater.Set(pet.FieldWeight, *value)
	}
	if value := pu.addweight; value != nil {
		updater.Add(pet.FieldWeight, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	id        int
	age       *int
	addage    *int
	name      *string
	weight    *float64
	addweight *float64
}

// SetAge sets the age field.
func (puo *PetUpdateOne) SetAge(i int) *PetUpdateOne {
	puo.age = &i
	puo.addage = nil
	return puo
}

// AddAge adds i to age.
func (puo *PetUpdateOne) AddAge(i int) *PetUpdateOne {
	if puo.addage == nil {
		puo.addage = &i
	} else {
		*puo.addage += i
	}
	return puo
}

// SetName sets the name field.
func (puo *PetUpdateOne) SetName(s string) *PetUpdateOne {
	puo.name = &s
	return puo
}

// SetWeight sets the weight field.
func (puo *PetUpdateOne) SetWeight(f float64) *PetUpdateOne {
	puo.weight = &f
	puo.addweight = nil
	return puo
}

// AddWeight adds f to weight.
func (puo *PetUpdateOne) AddWeight(f float64) *PetUpdateOne {
	if puo.addweight == nil {
		puo.addweight = &f
	} else {
		*puo.addweight += f
	}
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	if puo.age != nil {
		if err := pet.AgeValidator(*puo.age); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
		}
	}
	if puo.name != nil {
		if err := pet.NameValidator(*puo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	pe, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pe
}

// Exec executes the query on the entity.
func (puo *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PetUpdateOne) sqlSave(ctx context.Context) (pe *Pet, err error) {
	var (
		builder  = sql.Dialect(puo.driver.Dialect())
		selector = builder.Select(pet.Columns...).From(builder.Table(pet.Table))
	)
	pet.ID(puo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = puo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		pe = &Pet{config: puo.config}
		if err := pe.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Pet: %v", err)
		}
		id = pe.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Pet with id: %v", puo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Pet with the same id: %v", puo.id)
	}

	tx, err := puo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(pet.Table)
	)
	updater = updater.Where(sql.InInts(pet.FieldID, ids...))
	if value := puo.age; value != nil {
		updater.Set(pet.FieldAge, *value)
		pe.Age = *value
	}
	if value := puo.addage; value != nil {
		updater.Add(pet.FieldAge, *value)
		pe.Age += *value
	}
	if value := puo.name; value != nil {
		updater.Set(pet.FieldName, *value)
		pe.Name = *value
	}
	if value := puo.weight; value != nil {
		updater.Set(pet.FieldWeight, *value)
		pe.Weight = *value
	}
	if value := puo.addweight; value != nil {
		updater.Add(pet.FieldWeight, *value)
		pe.Weight += *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return pe, nil
}
