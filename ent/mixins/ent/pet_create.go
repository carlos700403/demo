// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kidlj/demo/ent/mixins/ent/pet"
)

// PetCreate is the builder for creating a Pet entity.
type PetCreate struct {
	config
	age    *int
	name   *string
	weight *float64
}

// SetAge sets the age field.
func (pc *PetCreate) SetAge(i int) *PetCreate {
	pc.age = &i
	return pc
}

// SetName sets the name field.
func (pc *PetCreate) SetName(s string) *PetCreate {
	pc.name = &s
	return pc
}

// SetWeight sets the weight field.
func (pc *PetCreate) SetWeight(f float64) *PetCreate {
	pc.weight = &f
	return pc
}

// Save creates the Pet in the database.
func (pc *PetCreate) Save(ctx context.Context) (*Pet, error) {
	if pc.age == nil {
		return nil, errors.New("ent: missing required field \"age\"")
	}
	if err := pet.AgeValidator(*pc.age); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
	}
	if pc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := pet.NameValidator(*pc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if pc.weight == nil {
		return nil, errors.New("ent: missing required field \"weight\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PetCreate) SaveX(ctx context.Context) *Pet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PetCreate) sqlSave(ctx context.Context) (*Pet, error) {
	var (
		builder = sql.Dialect(pc.driver.Dialect())
		pe      = &Pet{config: pc.config}
	)
	tx, err := pc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(pet.Table).Default()
	if value := pc.age; value != nil {
		insert.Set(pet.FieldAge, *value)
		pe.Age = *value
	}
	if value := pc.name; value != nil {
		insert.Set(pet.FieldName, *value)
		pe.Name = *value
	}
	if value := pc.weight; value != nil {
		insert.Set(pet.FieldWeight, *value)
		pe.Weight = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(pet.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	pe.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return pe, nil
}
